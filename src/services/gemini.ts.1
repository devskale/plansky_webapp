import { GoogleGenerativeAI } from '@google/generative-ai';

// Ensure API key is available
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

if (!API_KEY) {
  throw new Error('Missing Gemini API key. Please set VITE_GEMINI_API_KEY in your .env file.');
}

const genAI = new GoogleGenerativeAI(API_KEY);

export async function analyzeDrawing(imageData: string): Promise<any> {
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash-002' });
    
    // Remove data URL prefix for base64 processing
    const base64Image = imageData.split(',')[1];
    
    const prompt = `You are an expert in analyzing architectural drawings. Please analyze this architectural drawing and provide the information in a valid JSON format exactly as follows:
    {
      "projectName": "string", // Name of the project if visible, "Unknown" if not visible
      "architect": "string",   // Architect name if visible, "Unknown" if not visible
      "date": "string",       // Date if visible, "Unknown" if not visible
      "rooms": [
        {
          "number": "string",         // Room number or "N/A" if not available
          "description": "string",    // Room purpose/description
          "category": "string",       // Category (Medical/Storage/Staff/etc)
          "size": number,            // Size in square meters, 0 if not visible
          "floorMaterial": "string", // Floor material or "Unknown" if not specified
          "ceilingHeight": number    // Height in meters, 0 if not specified
        }
      ]
    }

    Important: Your response must be ONLY the JSON object, with no additional text before or after.`;

    const result = await model.generateContent([
      prompt,
      {
        inlineData: {
          data: base64Image,
          mimeType: 'image/png'
        }
      }
    ]);

    const response = await result.response;
    const text = response.text();
    
    // Log the raw response for debugging
    console.log('Raw Gemini Response:', text);
    
    try {
      // Try to clean the response if it contains markdown code blocks
      const cleanedText = text.replace(/```json\n?|\n?```/g, '').trim();
      console.log('Cleaned Response:', cleanedText);
      
      return JSON.parse(cleanedText);
    } catch (parseError) {
      console.error('Parse Error:', parseError);
      console.log('Failed to parse text:', text);
      throw new Error(`Failed to parse Gemini API response as JSON. Raw response: ${text}`);
    }
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(`Analysis failed: ${error.message}`);
    }
    throw new Error('An unexpected error occurred during analysis');
  }
}